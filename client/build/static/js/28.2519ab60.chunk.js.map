{"version":3,"sources":["routes/Widgets/TransferTree/components/index.js","components/BaseComponent/index.js","components/Panel/Panel.js","components/Panel/index.js","components/TransferTree/List.js","components/TransferTree/Search.js","components/TransferTree/ListTree.js","components/TransferTree/TransferTree.js","components/TransferTree/index.js"],"names":["Content","connect","transferTree","loading","models","onLoadData","treeNode","asyncDataSource","props","Promise","resolve","children","dispatch","type","afterResponse","data","dataRef","payload","valueField","url","eventKey","onAsyncSearch","searchText","$$","post","search","then","onCustomLoadData","customAsyncDataSource","onCustomChange","targetKeys","targetNodes","e","notice","warn","this","dataSource","className","gutter","span","title","loadData","asyncSearch","showSearch","key","titleText","max","onChange","treeRender","item","gender","style","alignItems","listRender","BaseComponent","config","onAdd","setState","record","visible","onUpdate","onDelete","isArray","length","content","confirm","onOk","handleDelete","onCancel","records","history","React","Component","noop","_","Panel","onExpand","expand","collapse","onCollapse","onRefresh","refresh","state","animationName","onClose","theme","prefix","width","height","header","cover","scroll","classnames","cx","styles","bodyStyles","overflow","Header","onClick","Icon","onConfirm","placement","CSSAnimate","callback","nextProps","prevState","isEqual","defaultProps","List","handleDeleteItem","items","preventDefault","stopPropagation","onDeleteItem","renderItem","i","render","titleKey","rowKey","data-key","CloseOutlined","prefixCls","notFoundContent","listCls","classNames","map","Search","value","handleChange","handleClear","debounce","placeholder","icon","CloseCircleFilled","SearchOutlined","ref","target","PureComponent","ListTree","expandedKeys","autoExpandParent","searchList","handleFilter","renderFilterResult","renderTreeNodes","treeKey","treeTitleKey","treeProps","TreeNode","filter","flatTreeData","promise","listItem","indexOf","renderSearchItem","index","handleSelect","selectedItem","selectedKeys","selectedNodes","_selectedNodes","some","push","onTreeSelected","onSelect","_selectedKeys","info","selected","node","isLeaf","concat","event","concatKeys","reduce","prev","next","treeData","searchPlaceholder","showTree","multiple","spinning","handleSelectAll","TransferTree","direction","v","handleLeftFilter","handleRightFilter","handleRightClear","nodes","console","error","leftFilter","rightFilter","getFlatTreeData","forEach","prevProps","footer","listStyle","cls","RightOutlined"],"mappings":"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","file":"static/js/28.2519ab60.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'dva';\r\nimport { Layout, Row, Col } from 'antd';\r\nimport BaseComponent from 'components/BaseComponent';\r\nimport Panel from 'components/Panel';\r\nimport TransferTree from 'components/TransferTree';\r\nimport $$ from 'cmn-utils';\r\nimport './index.less';\r\nconst { Content } = Layout;\r\n\r\n@connect(({ transferTree, loading }) => ({\r\n  transferTree,\r\n  loading: loading.models.transferTree\r\n}))\r\nexport default class extends BaseComponent {\r\n  onLoadData = treeNode => {\r\n    const { asyncDataSource } = this.props.transferTree;\r\n    return new Promise(resolve => {\r\n      if (treeNode.props.children) {\r\n        resolve();\r\n        return asyncDataSource;\r\n      }\r\n      this.props.dispatch({\r\n        type: 'transferTree/@request',\r\n        afterResponse: ({ data }) => {\r\n          treeNode.props.dataRef.children = data;\r\n          resolve();\r\n          return asyncDataSource;\r\n        },\r\n        payload: {\r\n          valueField: 'asyncDataSource',\r\n          url: '/tree/getAsyncData',\r\n          data: treeNode.props.eventKey\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  onAsyncSearch = searchText => {\r\n    return $$.post('/tree/getAsyncSearchData', { search: searchText }).then(\r\n      ({ data }) => data\r\n    );\r\n  };\r\n\r\n  // 自定义样式树\r\n  onCustomLoadData = treeNode => {\r\n    const { customAsyncDataSource } = this.props.transferTree;\r\n    return new Promise(resolve => {\r\n      if (treeNode.props.children) {\r\n        resolve();\r\n        return customAsyncDataSource;\r\n      }\r\n      this.props.dispatch({\r\n        type: 'transferTree/@request',\r\n        afterResponse: ({ data }) => {\r\n          treeNode.props.dataRef.children = data;\r\n          resolve();\r\n          return customAsyncDataSource;\r\n        },\r\n        payload: {\r\n          valueField: 'customAsyncDataSource',\r\n          url: '/tree/getCustomAsyncData',\r\n          data: treeNode.props.eventKey\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  onCustomChange = (targetKeys, targetNodes, e) => {\r\n    if (e === 'OutOfMaxSize') {\r\n      this.notice.warn(\"最多只能选择2人哦！\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      dataSource,\r\n      asyncDataSource,\r\n      customAsyncDataSource\r\n    } = this.props.transferTree;\r\n    const { loading } = this.props;\r\n    return (\r\n      <Layout className=\"full-layout page transfer-tree-page\">\r\n        <Content>\r\n          <Row gutter={20}>\r\n            <Col span={12}>\r\n              <Panel title=\"树型穿缩框\">\r\n                <TransferTree dataSource={dataSource} loading={loading} />\r\n              </Panel>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Panel title=\"异步树型穿缩框\">\r\n                <TransferTree\r\n                  dataSource={asyncDataSource}\r\n                  loadData={this.onLoadData}\r\n                  asyncSearch={this.onAsyncSearch}\r\n                  loading={loading}\r\n                  showSearch\r\n                />\r\n              </Panel>\r\n            </Col>\r\n          </Row>\r\n          <Row gutter={20}>\r\n            <Col span={12}>\r\n              <Panel title=\"默认值 targetNodes\">\r\n                <TransferTree\r\n                  dataSource={dataSource}\r\n                  loading={loading}\r\n                  targetNodes={[\r\n                    { key: '341522', title: '霍邱县' },\r\n                    { key: '340506', title: '博望区' }\r\n                  ]}\r\n                  showSearch\r\n                />\r\n              </Panel>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Panel title=\"MAX & ICON\">\r\n                <TransferTree\r\n                  className=\"my-theme\"\r\n                  titleText=\"组织架构\"\r\n                  dataSource={customAsyncDataSource}\r\n                  loadData={this.onCustomLoadData}\r\n                  asyncSearch={this.onAsyncSearch}\r\n                  loading={loading}\r\n                  max={2}\r\n                  onChange={this.onCustomChange}\r\n                  treeRender={item =>\r\n                    typeof item.gender !== 'undefined' ? (\r\n                      <span className=\"flex\" style={{ alignItems: 'center' }}>\r\n                        <span className={item.gender ? 'man' : 'woman'}></span>\r\n                        <span>{item.title}</span>\r\n                      </span>\r\n                    ) : (\r\n                      item.title\r\n                    )\r\n                  }\r\n                  listRender={item => (\r\n                    <div className=\"flex\">\r\n                      <span className={item.gender ? 'man' : 'woman'}></span>\r\n                      <span>{item.title}</span>\r\n                    </div>\r\n                  )}\r\n                />\r\n              </Panel>\r\n            </Col>\r\n          </Row>\r\n        </Content>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Modal } from 'antd';\r\nimport $$ from 'cmn-utils';\r\nimport config from '@/config';\r\n\r\nclass BaseComponent extends React.Component {\r\n  notice = config.notice; // 消息通知\r\n\r\n  /**\r\n   * history api 路由跳转\r\n   */\r\n  get history() { \r\n    return this.props.history;\r\n  }\r\n\r\n  /**\r\n   * 新增\r\n   */\r\n  onAdd = () => {\r\n    this.setState({\r\n      record: null,\r\n      visible: true\r\n    });\r\n  };\r\n\r\n  /**\r\n   * 修改\r\n   * @param {object} 表单记录\r\n   */\r\n  onUpdate = record => {\r\n    this.setState({\r\n      record,\r\n      visible: true\r\n    });\r\n  };\r\n\r\n  /**\r\n   * 删除\r\n   * @param {object | array} 表单记录, 批量删除时为数组\r\n   */\r\n  onDelete = record => {\r\n    if (!record) return;\r\n    if ($$.isArray(record) && !record.length) return;\r\n\r\n    const content = `您是否要删除这${\r\n      $$.isArray(record) ? record.length : ''\r\n    }项？`;\r\n\r\n    Modal.confirm({\r\n      title: '注意',\r\n      content,\r\n      onOk: () => {\r\n        this.handleDelete($$.isArray(record) ? record : [record]);\r\n      },\r\n      onCancel() {}\r\n    });\r\n  };\r\n\r\n  handleAdd() {\r\n    /* 子类重写 */\r\n  }\r\n  handleUpdate() {\r\n    /* 子类重写 */\r\n  }\r\n  handleDelete(records) {\r\n    /* 子类重写 */\r\n  }\r\n}\r\n\r\nexport default BaseComponent;\r\n","import React, { Component } from 'react';\r\nimport Icon from '../Icon';\r\nimport cx from 'classnames';\r\nimport CSSAnimate from '../CSSAnimate';\r\nimport { Popconfirm, Modal } from 'antd';\r\nimport isEqual from 'react-fast-compare';\r\nimport './style/index.less';\r\nconst confirm = Modal.confirm;\r\nconst noop = _ => {};\r\n/**\r\n * 面板组件\r\n */\r\nclass Panel extends Component {\r\n  static defaultProps = {\r\n    prefix: 'antui-panel'\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      collapse: props.collapse || false,\r\n      expand: props.expand || false,\r\n      refresh: 0,\r\n      animationName: ''\r\n    };\r\n  }\r\n\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    if (\r\n      'collapse' in nextProps &&\r\n      !isEqual(nextProps.collapse, prevState.collapse)\r\n    ) {\r\n      return {\r\n        collapse: !!nextProps.collapse\r\n      };\r\n    }\r\n\r\n    if ('expand' in nextProps && !isEqual(nextProps.expand, prevState.expand)) {\r\n      return {\r\n        expand: !!nextProps.expand\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  onExpand = expand => e => {\r\n    const { onChange } = this.props;\r\n\r\n    this.setState({\r\n      expand,\r\n      collapse: false\r\n    });\r\n\r\n    if (onChange) {\r\n      onChange({\r\n        expand,\r\n        collapse: false\r\n      });\r\n    }\r\n  };\r\n\r\n  onCollapse = collapse => e => {\r\n    const { onChange } = this.props;\r\n\r\n    this.setState({\r\n      collapse,\r\n      expand: false\r\n    });\r\n\r\n    if (onChange) {\r\n      onChange({\r\n        collapse,\r\n        expand: false\r\n      });\r\n    }\r\n  };\r\n\r\n  onRefresh = () => {\r\n    this.setState({\r\n      refresh: this.state.refresh + 1,\r\n      animationName: 'fadeIn'\r\n    });\r\n    this.props.onRefresh && this.props.onRefresh();\r\n  };\r\n\r\n  onClose = () => {\r\n    const { expand } = this.state;\r\n    if (expand) {\r\n      confirm({\r\n        title: '提示',\r\n        content: '您确认要关闭这个面板？',\r\n        onOk: () => {\r\n          this.props.onClose && this.props.onClose();\r\n        }\r\n      });\r\n    } else {\r\n      this.props.onClose && this.props.onClose();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { expand, collapse, refresh, animationName } = this.state;\r\n    const {\r\n      theme,\r\n      prefix,\r\n      className,\r\n      title,\r\n      width,\r\n      height,\r\n      style,\r\n      children,\r\n      header,\r\n      cover,\r\n      scroll\r\n    } = this.props;\r\n\r\n    const classnames = cx(prefix, className, {\r\n      theme: !!theme,\r\n      'panel-fullscreen': !!expand,\r\n      'panel-collapsed': !!collapse,\r\n      cover: !!cover\r\n    });\r\n\r\n    const styles = {\r\n      ...style,\r\n      width\r\n    };\r\n    const bodyStyles = {};\r\n    if (!expand) {\r\n      bodyStyles.height = height;\r\n    }\r\n    if (scroll) {\r\n      bodyStyles.overflow = 'auto';\r\n    }\r\n\r\n    const Header =\r\n      typeof header === 'undefined' ? (\r\n        <div className={`${prefix}-header`}>\r\n          <span className={`${prefix}-header-title`}>{title}</span>\r\n          <span className={`${prefix}-header-controls`}>\r\n            <a className=\"panel-control-loader\" onClick={this.onRefresh}>\r\n              <Icon type=\"refresh\" />\r\n            </a>\r\n            <a\r\n              className=\"panel-control-fullscreen\"\r\n              onClick={this.onExpand(expand ? false : true)}\r\n            >\r\n              <Icon type={`${expand ? 'shrink' : 'enlarge'}`} />\r\n            </a>\r\n            <a\r\n              className=\"panel-control-collapsed\"\r\n              onClick={this.onCollapse(collapse ? false : true)}\r\n            >\r\n              <Icon type={`${collapse ? 'plus' : 'minus'}`} />\r\n            </a>\r\n            <Popconfirm\r\n              title=\"您确认要关闭这个面板？\"\r\n              onConfirm={this.onClose}\r\n              placement=\"topRight\"\r\n            >\r\n              <a\r\n                className=\"panel-control-remove\"\r\n                onClick={expand ? this.onClose : noop}\r\n              >\r\n                <Icon type=\"close\" />\r\n              </a>\r\n            </Popconfirm>\r\n          </span>\r\n        </div>\r\n      ) : (\r\n        header\r\n      );\r\n\r\n    return (\r\n      <div className={classnames} style={styles}>\r\n        {Header}\r\n        <div className={`${prefix}-body`} style={bodyStyles}>\r\n          <CSSAnimate\r\n            className=\"panel-content\"\r\n            type={animationName}\r\n            callback={_ => this.setState({ animationName: '' })}\r\n            key={refresh}\r\n          >\r\n            {children}\r\n          </CSSAnimate>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Panel;\r\n","import Panel from './Panel';\r\n\r\nexport default Panel;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CloseOutlined } from '@ant-design/icons';\r\nimport classNames from 'classnames';\r\nimport isEqual from 'react-fast-compare';\r\n\r\nfunction noop() {}\r\n\r\nexport default class List extends React.Component {\r\n  static defaultProps = {\r\n    prefixCls: 'antui-transfer-tree-list',\r\n    dataSource: [],\r\n    rowKey: 'key',\r\n    onDeleteItem: noop\r\n  };\r\n\r\n  static propTypes = {\r\n    prefixCls: PropTypes.string,\r\n    dataSource: PropTypes.array,\r\n    rowKey: PropTypes.string,\r\n    style: PropTypes.object,\r\n    render: PropTypes.func,\r\n    onDeleteItem: PropTypes.func,\r\n    max: PropTypes.number\r\n  };\r\n\r\n  state = {\r\n    dataSource: []\r\n  };\r\n\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    if (!isEqual(nextProps.dataSource, prevState.dataSource)) {\r\n      return {\r\n        dataSource: nextProps.dataSource\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  handleDeleteItem = (e, items) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    this.props.onDeleteItem(items ? items : this.state.dataSource);\r\n  };\r\n\r\n  renderItem = (i, key) => {\r\n    const { render, titleKey, rowKey } = this.props;\r\n\r\n    let item = this.state.dataSource[i];\r\n\r\n    return (\r\n      <li\r\n        className=\"list-comp-item\"\r\n        data-key={item[rowKey]}\r\n        title={item[titleKey]}\r\n        key={item[rowKey]}\r\n      >\r\n        <span className=\"list-comp-item-body\">\r\n          {render ? render(item) : item.title}\r\n        </span>\r\n        <a\r\n          className={`list-comp-clear-item`}\r\n          onClick={e => this.handleDeleteItem(e, [item])}\r\n        >\r\n          <CloseOutlined />\r\n        </a>\r\n      </li>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { prefixCls, notFoundContent, style, max } = this.props;\r\n\r\n    const listCls = classNames({\r\n      [prefixCls]: true\r\n    });\r\n\r\n    let unit = '条';\r\n\r\n    return (\r\n      <div className={listCls} style={style}>\r\n        <div className={`${prefixCls}-header`}>\r\n          <span className={`${prefixCls}-header-selected`}>\r\n            <span>\r\n              {this.state.dataSource.length} {max ? ` / ${max}` : ''} {unit}\r\n            </span>\r\n            <span className={`${prefixCls}-header-title`}>\r\n              <a\r\n                className={`${prefixCls}-clear-all`}\r\n                onClick={e => this.handleDeleteItem(e)}\r\n              >\r\n                清空列表\r\n              </a>\r\n            </span>\r\n          </span>\r\n        </div>\r\n        <div className={`${prefixCls}-body`}>\r\n          <div className={`${prefixCls}-body-content`}>\r\n            {!!this.state.dataSource.length || (\r\n              <div className={`${prefixCls}-body-content-not-found`}>\r\n                {notFoundContent || '列表为空'}\r\n              </div>\r\n            )}\r\n            {this.state.dataSource.map((item, i) =>\r\n              this.renderItem(i, item[this.props.rowKey])\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { CloseCircleFilled, SearchOutlined } from '@ant-design/icons';\r\nimport { Input } from 'antd';\r\nimport $$ from 'cmn-utils';\r\n\r\nexport default class Search extends React.PureComponent {\r\n  static defaultProps = {\r\n    placeholder: ''\r\n  };\r\n\r\n  state = {\r\n    value: '',\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChange = $$.debounce(props.onChange, 500);\r\n  }\r\n\r\n  handleChange = value => {\r\n    const onChange = this.props.onChange;\r\n    if (onChange) {\r\n      this.onChange(value);\r\n    }\r\n    this.setState({\r\n      value\r\n    })\r\n  };\r\n\r\n  handleClear = e => {\r\n    e.preventDefault();\r\n\r\n    const handleClear = this.props.handleClear;\r\n    if (handleClear) {\r\n      handleClear(e);\r\n    }\r\n    this.setState({\r\n      value: ''\r\n    })\r\n  };\r\n\r\n  render() {\r\n    const { placeholder, prefixCls } = this.props;\r\n    const icon =\r\n      this.state.value && this.state.value.length > 0 ? (\r\n        <a className={`${prefixCls}-action`} onClick={this.handleClear}>\r\n          <CloseCircleFilled />\r\n        </a>\r\n      ) : (\r\n        <span className={`${prefixCls}-action`}>\r\n          <SearchOutlined />\r\n        </span>\r\n      );\r\n    return (\r\n      <div>\r\n        <Input\r\n          placeholder={placeholder}\r\n          className={prefixCls}\r\n          value={this.state.value}\r\n          ref=\"input\"\r\n          onChange={e => this.handleChange(e.target.value)}\r\n        />\r\n        {icon}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Search from './Search';\r\nimport { Tree, Spin } from 'antd';\r\n\r\nfunction noop() {}\r\n\r\nexport default class ListTree extends React.Component {\r\n  static defaultProps = {\r\n    dataSource: [],\r\n    titleText: '',\r\n    treeKey: 'key',\r\n    treeTitleKey: 'title',\r\n    showSearch: false,\r\n    handleClear: noop,\r\n    handleFilter: noop,\r\n    handleSelect: noop,\r\n    handleSelectAll: noop\r\n  };\r\n\r\n  static propTypes = {\r\n    prefixCls: PropTypes.string,\r\n    treeData: PropTypes.array,\r\n    selectedKeys: PropTypes.array,\r\n    showSearch: PropTypes.bool,\r\n    searchPlaceholder: PropTypes.string,\r\n    titleText: PropTypes.string,\r\n    treeKey: PropTypes.string,\r\n    treeTitleKey: PropTypes.string,\r\n    style: PropTypes.object,\r\n    handleClear: PropTypes.func,\r\n    notFoundContent: PropTypes.string,\r\n    filter: PropTypes.string,\r\n    handleFilter: PropTypes.func,\r\n    render: PropTypes.func,\r\n    loading: PropTypes.bool,\r\n    flatTreeData: PropTypes.array\r\n  };\r\n\r\n  state = {\r\n    expandedKeys: [],\r\n    autoExpandParent: true,\r\n    searchList: []\r\n  };\r\n\r\n  handleFilter = value => {\r\n    this.renderFilterResult(value);\r\n    this.props.handleFilter(value);\r\n  };\r\n\r\n  handleClear = () => {\r\n    this.renderFilterResult('');\r\n    this.props.handleFilter('');\r\n  };\r\n\r\n  renderTreeNodes = data => {\r\n    const { treeKey, treeTitleKey, render } = this.props;\r\n\r\n    return data.map(item => {\r\n      const treeProps = {\r\n        ...item,\r\n        key: item[treeKey],\r\n        title: render ? render(item) : item[treeTitleKey],\r\n        dataRef: item\r\n      };\r\n\r\n      if (item.children) {\r\n        return (\r\n          <Tree.TreeNode {...treeProps}>\r\n            {this.renderTreeNodes(item.children)}\r\n          </Tree.TreeNode>\r\n        );\r\n      }\r\n      return <Tree.TreeNode {...treeProps} />;\r\n    });\r\n  };\r\n\r\n  renderFilterResult = filter => {\r\n    const { flatTreeData, treeTitleKey, asyncSearch } = this.props;\r\n    if (asyncSearch) {\r\n      const promise = asyncSearch(filter);\r\n      if (promise.then) {\r\n        promise.then(listItem => {\r\n          this.setState({\r\n            searchList: listItem\r\n          });\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        searchList: flatTreeData.filter(\r\n          item => item[treeTitleKey].indexOf(filter) >= 0\r\n        )\r\n      });\r\n    }\r\n  };\r\n\r\n  renderSearchItem = searchList => {\r\n    const { render } = this.props;\r\n\r\n    return searchList.map((item, index) => (\r\n      <li\r\n        className=\"list-comp-item\"\r\n        title={item[this.props.treeTitleKey]}\r\n        key={item[this.props.treeKey]}\r\n        onClick={() => this.handleSelect({ ...item, dataRef: item })}\r\n      >\r\n        <span className=\"list-comp-item-body\">\r\n          {render ? render(item) : item[this.props.treeTitleKey]}\r\n        </span>\r\n      </li>\r\n    ));\r\n  };\r\n\r\n  handleSelect = selectedItem => {\r\n    const { selectedKeys, selectedNodes, treeKey } = this.props;\r\n    let _selectedNodes = selectedNodes ? [...selectedNodes] : [];\r\n\r\n    if (\r\n      selectedKeys &&\r\n      selectedKeys.some(key => key === selectedItem[treeKey])\r\n    ) {\r\n      _selectedNodes = _selectedNodes.filter(\r\n        item => item[treeKey] !== selectedItem[treeKey]\r\n      );\r\n    } else {\r\n      _selectedNodes.push(selectedItem);\r\n    }\r\n    this.props.onTreeSelected(_selectedNodes);\r\n  };\r\n\r\n  onSelect = (_selectedKeys, info) => {\r\n    const {\r\n      selectedNodes,\r\n      selectedKeys,\r\n      loadData,\r\n      onTreeSelected,\r\n      treeKey,\r\n      treeTitleKey\r\n    } = this.props;\r\n    if (info.selected && info.node.props.dataRef) {\r\n      if (loadData && !info.node.props.dataRef.isLeaf) {\r\n        return;\r\n      } else if (\r\n        info.node.props.dataRef.children &&\r\n        info.node.props.dataRef.children.length\r\n      ) {\r\n        this.onExpand([info.node.props.eventKey], info);\r\n        return;\r\n      }\r\n    }\r\n\r\n    let targetNodes = info.selectedNodes.map(node => ({\r\n      [treeKey]: node[treeKey],\r\n      [treeTitleKey]: node[treeTitleKey],\r\n      // ...node.props,\r\n      ...node.dataRef\r\n    }));\r\n\r\n    // 如果是异步数据需要与老数据进行拼合及去重\r\n    if (loadData) {\r\n      let _selectedNodes = selectedNodes ? [...selectedNodes] : [];\r\n      if (!info.selected) {\r\n        // 如果是取消选择树节点，则先过滤掉\r\n        _selectedNodes = _selectedNodes.filter(\r\n          item => item[treeKey] !== info.node.props.eventKey\r\n        );\r\n      }\r\n      const newNodes = selectedKeys\r\n        ? _selectedNodes.concat(\r\n            targetNodes.filter(item => selectedKeys.indexOf(item[treeKey]) < 0)\r\n          )\r\n        : targetNodes;\r\n      onTreeSelected(newNodes);\r\n    } else {\r\n      onTreeSelected(targetNodes);\r\n    }\r\n  };\r\n\r\n  onExpand = (expandedKeys, info) => {\r\n    if (info.event && info.node.props.children) {\r\n      let concatKeys = [\r\n        expandedKeys,\r\n        this.state.expandedKeys\r\n      ].reduce((prev, next) =>\r\n        prev.filter(item => next.indexOf(item) === -1).concat(next)\r\n      );\r\n\r\n      if (\r\n        this.state.expandedKeys.some(item => item === info.node.props.eventKey)\r\n      ) {\r\n        concatKeys = concatKeys.filter(\r\n          item => item !== info.node.props.eventKey\r\n        );\r\n      }\r\n\r\n      this.setState({ expandedKeys: concatKeys, autoExpandParent: false });\r\n    } else {\r\n      this.setState({ expandedKeys, autoExpandParent: false });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      prefixCls,\r\n      loading,\r\n      treeData,\r\n      titleText,\r\n      loadData,\r\n      filter,\r\n      showSearch,\r\n      style,\r\n      selectedKeys\r\n    } = this.props;\r\n\r\n    const { expandedKeys, autoExpandParent, searchList } = this.state;\r\n\r\n    let { searchPlaceholder, notFoundContent } = this.props;\r\n\r\n    const showTree = (\r\n      <Tree\r\n        loadData={loadData}\r\n        onSelect={this.onSelect}\r\n        onExpand={this.onExpand}\r\n        selectedKeys={selectedKeys || []}\r\n        expandedKeys={expandedKeys}\r\n        autoExpandParent={autoExpandParent}\r\n        multiple\r\n      >\r\n        {this.renderTreeNodes(treeData)}\r\n      </Tree>\r\n    );\r\n\r\n    return (\r\n      <div className={prefixCls} style={style}>\r\n        <div className={`${prefixCls}-header tree-title`}>{titleText}</div>\r\n        <div\r\n          className={\r\n            showSearch\r\n              ? `${prefixCls}-body ${prefixCls}-body-with-search`\r\n              : `${prefixCls}-body`\r\n          }\r\n        >\r\n          {showSearch ? (\r\n            <div className={`${prefixCls}-body-search-wrapper`}>\r\n              <Search\r\n                prefixCls={`${prefixCls}-search`}\r\n                onChange={this.handleFilter}\r\n                handleClear={this.handleClear}\r\n                placeholder={searchPlaceholder || '请输入搜索内容'}\r\n              />\r\n            </div>\r\n          ) : null}\r\n          <div className={`${prefixCls}-body-content tree-content`}>\r\n            {filter ? (\r\n              <ul className=\"tree-filter-result\">\r\n                {this.renderSearchItem(searchList)}\r\n              </ul>\r\n            ) : null}\r\n            {treeData.length ? (\r\n              showTree\r\n            ) : (\r\n              <div className={`${prefixCls}-body-content-not-found`}>\r\n                {loading ? (\r\n                  <Spin spinning={loading} />\r\n                ) : (\r\n                  notFoundContent || '列表为空'\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport List from './List';\r\nimport ListTree from './ListTree';\r\nimport { RightOutlined } from '@ant-design/icons';\r\nimport classNames from 'classnames';\r\nimport './style/index.less';\r\n\r\nfunction noop() {}\r\n\r\nexport default class TransferTree extends React.Component {\r\n  static defaultProps = {\r\n    prefixCls: 'antui-transfer-tree',\r\n    dataSource: [],\r\n    onChange: noop,\r\n    titleText: '源列表',\r\n    treeKey: 'key',\r\n    treeTitleKey: 'title',\r\n    showSearch: false,\r\n    footer: noop,\r\n    loading: false\r\n  };\r\n\r\n  static propTypes = {\r\n    prefixCls: PropTypes.string,\r\n    dataSource: PropTypes.array,\r\n    targetNodes: PropTypes.array,\r\n    onChange: PropTypes.func,\r\n    listStyle: PropTypes.object,\r\n    listRender: PropTypes.func,\r\n    treeKey: PropTypes.string,\r\n    treeTitleKey: PropTypes.string,\r\n    className: PropTypes.string,\r\n    titleText: PropTypes.string,\r\n    showSearch: PropTypes.bool,\r\n    searchPlaceholder: PropTypes.string,\r\n    notFoundContent: PropTypes.node,\r\n    footer: PropTypes.func,\r\n    treeRender: PropTypes.func,\r\n    loadData: PropTypes.func,\r\n    loading: PropTypes.bool,\r\n    asyncSearch: PropTypes.func,\r\n    max: PropTypes.number\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      leftFilter: '',\r\n      rightFilter: '',\r\n      dataSource: props.dataSource,\r\n      targetNodes: props.targetNodes,\r\n      selectedKeys: props.targetNodes\r\n        ? props.targetNodes.map(node => node[props.treeKey])\r\n        : null\r\n    };\r\n    if (props.showSearch) {\r\n      this.flatTreeData = this.getFlatTreeData(props.dataSource);\r\n    }\r\n  }\r\n\r\n  getFlatTreeData(treeData) {\r\n    let data = [];\r\n    treeData.forEach(item => {\r\n      if (item.children) {\r\n        data = data.concat(this.getFlatTreeData(item.children));\r\n      } else {\r\n        data.push(item);\r\n      }\r\n    });\r\n    return data;\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (\r\n      this.props.targetNodes !== prevProps.targetNodes ||\r\n      this.props.dataSource !== prevProps.dataSource\r\n    ) {\r\n      if (this.props.targetNodes) {\r\n        this.setState({\r\n          targetNodes: this.props.targetNodes,\r\n          selectedKeys: this.props.targetNodes.map(node => node[this.props.treeKey])\r\n        });\r\n      }\r\n      if (this.props.dataSource) {\r\n        this.setState({\r\n          dataSource: this.props.dataSource\r\n        });\r\n      }\r\n      if (this.props.showSearch) {\r\n        this.flatTreeData = this.getFlatTreeData(this.props.dataSource);\r\n      }\r\n    }\r\n  }\r\n\r\n  handleFilter = (direction, v) => {\r\n    this.setState({\r\n      [`${direction}Filter`]: v\r\n    });\r\n  };\r\n\r\n  handleLeftFilter = v => this.handleFilter('left', v);\r\n  handleRightFilter = v => this.handleFilter('right', v);\r\n\r\n  handleClear = direction => {\r\n    this.setState({\r\n      [`${direction}Filter`]: ''\r\n    });\r\n  };\r\n\r\n  handleRightClear = () => this.handleClear('right');\r\n  handleDeleteItem = nodes => {\r\n    const { treeKey } = this.props;\r\n    const targetNodes = this.state.targetNodes.filter(\r\n      node => !nodes.some(item => item[treeKey] === node[treeKey])\r\n    );\r\n    const targetKeys = targetNodes.map(node => node[treeKey]);\r\n\r\n    this.setState({\r\n      selectedKeys: targetKeys,\r\n      targetNodes: targetNodes\r\n    });\r\n\r\n    this.props.onChange && this.props.onChange(targetKeys, targetNodes);\r\n  };\r\n\r\n  onTreeSelected = selectedNodes => {\r\n    const { treeKey, max } = this.props;\r\n\r\n    if (max && selectedNodes.length > max) {\r\n      console.error('error, selected number > max');\r\n      const { targetKeys, targetNodes } = this.state;\r\n      this.props.onChange &&\r\n        this.props.onChange(targetKeys, targetNodes, 'OutOfMaxSize');\r\n      return;\r\n    }\r\n\r\n    const targetKeys = selectedNodes.map(node => node[treeKey]);\r\n\r\n    this.setState({\r\n      selectedKeys: targetKeys,\r\n      targetNodes: selectedNodes\r\n    });\r\n\r\n    this.props.onChange && this.props.onChange(targetKeys, selectedNodes);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      prefixCls,\r\n      titleText,\r\n      showSearch,\r\n      notFoundContent,\r\n      treeKey,\r\n      treeTitleKey,\r\n      searchPlaceholder,\r\n      footer,\r\n      listStyle,\r\n      className,\r\n      listRender,\r\n      treeRender,\r\n      loadData,\r\n      loading,\r\n      asyncSearch,\r\n      max\r\n    } = this.props;\r\n    const {\r\n      leftFilter,\r\n      rightFilter,\r\n      selectedKeys,\r\n      targetNodes,\r\n      dataSource\r\n    } = this.state;\r\n\r\n    const cls = classNames({\r\n      [className]: !!className,\r\n      [prefixCls]: true\r\n    });\r\n\r\n    return (\r\n      <div className={cls}>\r\n        <ListTree\r\n          titleText={titleText}\r\n          loadData={loadData}\r\n          asyncSearch={asyncSearch}\r\n          treeData={dataSource}\r\n          flatTreeData={this.flatTreeData}\r\n          selectedKeys={selectedKeys}\r\n          selectedNodes={targetNodes}\r\n          treeKey={treeKey}\r\n          treeTitleKey={treeTitleKey}\r\n          render={treeRender}\r\n          style={listStyle}\r\n          filter={leftFilter}\r\n          handleFilter={this.handleLeftFilter}\r\n          onTreeSelected={this.onTreeSelected}\r\n          showSearch={showSearch}\r\n          searchPlaceholder={searchPlaceholder}\r\n          notFoundContent={notFoundContent}\r\n          footer={footer}\r\n          prefixCls={`${prefixCls}-list`}\r\n          loading={loading}\r\n        />\r\n        <div className={`${prefixCls}-operation`}>\r\n          <RightOutlined />\r\n        </div>\r\n        <List\r\n          filter={rightFilter}\r\n          dataSource={targetNodes}\r\n          style={listStyle}\r\n          onDeleteItem={this.handleDeleteItem}\r\n          render={listRender}\r\n          notFoundContent={notFoundContent}\r\n          prefixCls={`${prefixCls}-list`}\r\n          max={max}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import TransferTree from './TransferTree';\r\n\r\nexport default TransferTree;"],"sourceRoot":""}